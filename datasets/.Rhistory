predict(object = model, newdata = data.frame(t_a = c(9,10,11,12)))
data.frame(t_a,demand) %>% ggplot(aes(t_a, demand)) +
geom_point() +
geom_line() +
geom_smooth(method = 'lm')
data.frame(demand_bi, t_a) %>% ggplot(aes(t_a, demand_bi)) +
geom_point() +
geom_line() +
geom_smooth(method = 'lm')
############################################# BIANNUAL COMPONENT #############################################
# define biannual component
q = rep(1,9)
q
#assign 1 to each index that is integer-divisible by 2,
#in R, in contrast to other languages, indexes start at 1.
for (i in c(1:length(q))) {
if(i%%2==0) {
q[i]=0
}
}
q
#fit the regression model
model_new=lm(demand ~ t_a + q)
model_new %>% summary()
# output predicted values for t=9 and t=10
predict(model_new, data.frame(t_a = c(9,10), q = c(0,1)))
#Define a demand vector that follows a biannual structure.
demand_bi = c(28.20, 2*37.65, 47.28, 2*59.76, 73.44, 2*86.19, 100.31, 2*112.58, 121.63)
data.frame(demand_bi, t_a) %>% ggplot(aes(t_a, demand_bi)) +
geom_point() +
geom_line() +
geom_smooth(method = 'lm')
model_bi_1 <- lm(demand_bi~t_a)
model_bi <- lm(demand_bi ~ t_a + q)
model_bi %>% summary()
durbinWatsonTest(model_bi_1)
######################################### INITIALISING VECTORS ################################################
# define x-sample
x=c(0.5,0.6,1,1.4,1.8,3.6,5.7,6.4,13)
# define y-sample
y=c(5,28,68,77,48,48,98,96,99)
########################################### REGRESSION MODEL ##################################################
# linear regression model(z): regress y on x
z <- lm(y~x)
# output linear regression model z
z
# output of z
summary(z)
library(tidyverse)
demand=c(28.20, 37.65, 47.28, 59.76, 73.44, 86.19, 100.31, 112.58, 121.63)  # define demand sample
t=c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)                                       # define period sample
t=c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)                                       # define period sample
t_a=c(0, 1, 2, 3, 4, 5, 6, 7, 8)                                            # define adjusted period sample with same number of time units as demand sample
# define linear regression model (model): regress demand on period (adjusted)
model=lm(demand~t_a)
# output of linear regression model (model)
model
summary(model)
data.frame(t_a,demand) %>% ggplot(aes(t_a, demand)) +
geom_point() +
geom_line() +
geom_smooth(method = 'lm')
############################################# PREDICTIONS #####################################################
# define predicted values of model
pred=predict(model)
#pm=predict(model,newdata=data.frame(t_a=t))
# output predicted values of model
pred
demand
data.frame(t_a = c(9,10))
# output predicted values for t=9 and t=10
#predict(model, data.frame(t_a = c(9,10)))
predict(object = model, newdata = data.frame(t_a = c(9,10)))
# output predicted values for t=9 and t=10
#predict(model, data.frame(t_a = c(9,10)))
predict(object = model, c(9,10))
# output predicted values for t=9 and t=10
#predict(model, data.frame(t_a = c(9,10)))
predict(object = model,data.frame( c(9,10)))
# output predicted values for t=9 and t=10
#predict(model, data.frame(t_a = c(9,10)))
predict(object = model,data.frame( t_a = c(9,10)))
data.frame(t_a,demand) %>% ggplot(aes(t_a, demand)) +
geom_point() +
geom_line() +
geom_smooth(method = 'lm')
############################################# BIANNUAL COMPONENT #############################################
# define biannual component
q = rep(1,9)
q
#assign 1 to each index that is integer-divisible by 2,
#in R, in contrast to other languages, indexes start at 1.
for (i in c(1:length(q))) {
if(i%%2==0) {
q[i]=0
}
}
q
#fit the regression model
model_new=lm(demand ~ t_a + q)
model %>% summary()
model_new %>% summary()
# output predicted values for t=9 and t=10
predict(model_new, data.frame(t_a = c(9,10), q = c(0,1)))
#Define a demand vector that follows a biannual structure.
demand_bi = c(28.20, 2*37.65, 47.28, 2*59.76, 73.44, 2*86.19, 100.31, 2*112.58, 121.63)
data.frame(demand_bi, t_a) %>% ggplot(aes(t_a, demand_bi)) +
geom_point() +
geom_line() +
geom_smooth(method = 'lm')
model_bi <- lm(demand_bi ~ t_a + q)
model_bi %>% summary()
library(car)
durbinWatsonTest(model_bi_1)
install.packages('AER')
library(AER)
data('CPS1988')
######################################### INITIALISING VECTORS ################################################
# define x-sample
x=c(0.5,0.6,1,1.4,1.8,3.6,5.7,6.4,13)
# define y-sample
y=c(5,28,68,77,48,48,98,96,99)
########################################### REGRESSION MODEL ##################################################
# linear regression model(z): regress y on x
z <- lm(y~x)
# output linear regression model z
z
# output of z
summary(z)
?t.test
demand=c(28.20, 37.65, 47.28, 59.76, 73.44, 86.19, 100.31, 112.58, 121.63)  # define demand sample
t=c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)                                       # define period sample
library(tidyverse)
t=c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)                                       # define period sample
t_a=c(0, 1, 2, 3, 4, 5, 6, 7, 8)                                            # define adjusted period sample with same number of time units as demand sample
# define linear regression model (model): regress demand on period (adjusted)
model=lm(demand~t_a)
# output of linear regression model (model)
model
summary(model)
data.frame(t_a,demand) %>% ggplot(aes(t_a, demand)) +
geom_point() +
geom_line() +
geom_smooth(method = 'lm')
############################################# PREDICTIONS #####################################################
# define predicted values of model
pred=predict(model)
#pm=predict(model,newdata=data.frame(t_a=t))
# output predicted values of model
pred
data.frame(t_a = c(9,10))
# output predicted values for t=9 and t=10
#predict(model, data.frame(t_a = c(9,10)))
predict(object = model, newdata = data.frame(t_a = c(9,10)))
# define prediction errors
err=demand-pred
n = length(err)
# define mean squared error
MSE=sum((err)^2)/n
# define root mean squared error
RMSE=sqrt(MSE)
############################################# BIANNUAL COMPONENT #############################################
# define biannual component
q = rep(1,9)
q
#assign 0 to each index that is integer-divisible by 2,
#in R, in contrast to other languages, indexes start at 1.
for (i in c(1:length(q))) {
if(i%%2==0) {
q[i]=0
}
}
q
#fit the regression model
model_new=lm(demand ~ t_a + q)
model_new %>% summary()
data.frame(t_a,demand) %>% ggplot(aes(t_a, demand)) +
geom_point() +
geom_line() +
geom_smooth(method = 'lm')
#Define a demand vector that follows a biannual structure.
demand_bi = c(28.20, 2*37.65, 47.28, 2*59.76, 73.44, 2*86.19, 100.31, 2*112.58, 121.63)
model_bi <- lm(demand_bi ~ t_a + q)
model_bi %>% summary()
data.frame(demand_bi, t_a) %>% ggplot(aes(t_a, demand_bi)) +
geom_point() +
geom_line() +
geom_smooth(method = 'lm')
model_bi_1 <- lm(demand_bi~t_a)
model_bi_1 %>% summary
model_bi_1 %>% summary()
model_bi %>% summary()
######################################### INITIALISING VECTORS ################################################
# define x-sample
x=c(0.5,0.6,1,1.4,1.8,3.6,5.7,6.4,13)
# define y-sample
y=c(5,28,68,77,48,48,98,96,99)
######################################### INITIALISING VECTORS ################################################
# define x-sample
x=c(0.5,0.6,1,1.4,1.8,3.6,5.7,6.4,13)
# define y-sample
y=c(5,28,68,77,48,48,98,96,99)
########################################### REGRESSION MODEL ##################################################
# linear regression model(z): regress y on x
z <- lm(y~x) #y_hat = b0+b1*x
# output linear regression model z
z
# output of z
summary(z)
library(tidyverse)
demand=c(28.20, 37.65, 47.28, 59.76, 73.44, 86.19, 100.31, 112.58, 121.63)  # define demand sample
t=c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)                                       # define period sample
# define linear regression model (model): regress demand on period (adjusted)
model=lm(demand~t_a)
# output of linear regression model (model)
model
summary(model)
data.frame(t_a,demand) %>% ggplot(aes(t_a, demand)) +
geom_point() +
geom_line() +
geom_smooth(method = 'lm')
data.frame(t_a,demand) %>% ggplot(aes(t_a, demand)) +
geom_point() +
geom_line() +
geom_smooth(method = 'lm')
############################################# PREDICTIONS #####################################################
# define predicted values of model
pred=predict(model)
#pm=predict(model,newdata=data.frame(t_a=t))
# output predicted values of model
pred
demand
data.frame(t_a = c(9,10))
# output predicted values for t=9 and t=10
#predict(model, data.frame(t_a = c(9,10)))
predict(object = model, newdata = data.frame(t_a = c(9,10)))
# define prediction errors
err=demand-pred
err = model$residuals
n = length(err)
Metrics::rmse(demand, pred)
rep(1:0,4)
q
############################################# BIANNUAL COMPONENT #############################################
# define biannual component
q = rep(1,9)
1
q
#assign 0 to each index that is integer-divisible by 2,
#in R, in contrast to other languages, indexes start at 1.
for (i in c(1:length(q))) {
if(i%%2==0) {
q[i]=0
}
}
q
#fit the regression model
model_new=lm(demand ~ t_a + q)
model_new %>% summary
data.frame(t_a,demand) %>% ggplot(aes(t_a, demand)) +
geom_point() +
geom_line() +
geom_smooth(method = 'lm')
# output predicted values for t=9 and t=10
predict(model_new, data.frame(t_a = c(9,10), q = c(0,1)))
#Define a demand vector that follows a biannual structure.
demand_bi = c(28.20, 2*37.65, 47.28, 2*59.76, 73.44, 2*86.19, 100.31, 2*112.58, 121.63)
data.frame(demand_bi, t_a) %>% ggplot(aes(t_a, demand_bi)) +
geom_point() +
geom_line() +
geom_smooth(method = 'lm')
model_bi <- lm(demand_bi ~ t_a + q)
model_bi %>% summary()
model_bi_1 <- lm(demand_bi~t_a)
model_bi_1 %>% summary
a <- seq(1:100, 2)
a <- seq(1,100, 2)
?rnorm
rnorm(100,1,1)
b <- a*2 + rnorm(100,0,1)
b
lm(b~a)
b <- a*2 + rnorm(100,0,1)
nrow(b)
is.vector(b)
is.vector(a)
lm(b~a)
head(a)
head(b)
lm(b~a)
length(a)
length(b)
a <- seq(1,100, 1)
b <- a*2 + rnorm(100,0,1)
lm(b~a)
c <- sin(a) + rnorm(100, 0, .5)
summary(lm(b~a))
summary(lm(b~a+c))
library(tidyverse)
demand=c(28.20, 37.65, 47.28, 59.76, 73.44, 86.19, 100.31, 112.58, 121.63)  # define demand sample
t=c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)                                       # define period sample
t_a=c(0, 1, 2, 3, 4, 5, 6, 7, 8)                                            # define adjusted period sample with same number of time units as demand sample
# define linear regression model (model): regress demand on period (adjusted)
model=lm(demand~t_a)
# output of linear regression model (model)
model
summary(model)
data.frame(t_a,demand) %>% ggplot(aes(t_a, demand)) +
geom_point() +
geom_line() +
geom_smooth(method = 'lm')
############################################# PREDICTIONS #####################################################
# define predicted values of model
pred=predict(model)
#pm=predict(model,newdata=data.frame(t_a=t))
# output predicted values of model
pred
# output predicted values for t=9 and t=10
#predict(model, data.frame(t_a = c(9,10)))
predict(object = model, newdata = data.frame(t_a = c(9,10)))
# define prediction errors
err=demand-pred
err = model$residuals
n = length(err)
# output prediction errors
err
M
# define mean squared error
MSE=sum((err)^2)/n
#MSE=sum(model$residuals^2/length(d))  #Alternatively calculate MSE directly from lm
# output mean squared error
MSE
library(Metrics)
Metrics::rmse(demand, pred)
# define root mean squared error
RMSE=sqrt(MSE)
# output root mean squared error
RMSE
############################################# BIANNUAL COMPONENT #############################################
# define biannual component
q = rep(1,9)
#assign 0 to each index that is integer-divisible by 2,
#in R, in contrast to other languages, indexes start at 1.
for (i in c(1:length(q))) {
if(i%%2==0) {
q[i]=0
}
}
#fit the regression model
model_new=lm(demand ~ t_a + q)
# output predicted values for t=9 and t=10
predict(model_new, data.frame(t_a = c(9,10), q = c(0,1)))
#output model
model_new
#summary of the model
summary(model_new)
d <- cos(a) + rnorm(100, 0, 1)
summary(lm(b~a+c+d))
library(AER)  #install.packages("AER")
data("CPS1988")
?CPS1988
summary(CPS1988)
attach(CPS1988)  # attach "journal" data set st. R knows all the relevant variables
summary(wage)
head(wage)       # wage is numeric, decimal number and has no single value twice
model_int=lm(log(wage)~experience+I(experience^2)+education*ethnicity)  # includes interaction (:) and main efffects
summary(model_int)
install.packages("plm")
library(plm)  #install.packages("plm")
data("Grunfeld",package="AER")
?Grunfeld
summary(Grunfeld)
grunfeld = subset(Grunfeld, firm %in% c("General Electric", "General Motors", "IBM"))  # delete all observations but "GE", "GM" and "IBM"
panel_grunfeld = plm.data(grunfeld, index = c("firm", "year"))   # plm.data defines the indivdual (firm) and time (year) indeces
attach(panel_grunfeld)
summary(invest)
head(invest)          # invest is numeric, decimal number and has no single value twice
grunfeld_pool = plm(invest~value+capital, data=panel_grunfeld, model="pooling")
# check whether the random effects are really needed
plmtest(grunfeld_pool)
# create fixed effects model
grunfeld_fe = plm(invest~value+capital, data=panel_grunfeld, model="within")
# create random effects model
grunfeld_re = plm(invest ~ value + capital, data = panel_grunfeld, model = "random", random.method="walhus")
# Hausman test to decide between fixed effects model and random effects model
phtest(grunfeld_re, grunfeld_fe)
# create fixed effects model
grunfeld_fe = plm(invest~value+capital, data=panel_grunfeld, model="within")
# create random effects model
grunfeld_re = plm(invest ~ value + capital, data = panel_grunfeld, model = "random", random.method="walhus")
grunfeld_fe %>% summary
summary(grunfeld_fe)
summary(grunfeld_re)
# Hausman test to decide between fixed effects model and random effects model
phtest(grunfeld_re, grunfeld_fe)
library(openxlsx)
library(tidymodels)
library(tidyverse)
# Read in the data
df <- read.xlsx('E Commerce Dataset.xlsx', sheet = 'E_Comm')
##------Regret------##
runtime_regret <- tibble::tibble(model = c('Random Sampling','Random Sampling', 'Bayesian Optimization'),
n_samples = c(60,100,20),
time = c(9.73948469, 17.0868788, 26.0442599))
runtime_regret %>%
mutate(n_samples = as.character(n_samples)) %>%
unite(model, n_samples,
col='model,n_collected_samples',
sep=', ',
na.rm=F) %>%
ggplot(aes(`model,n_collected_samples`, time, fill=`model,n_collected_samples`)) +
geom_col() +
coord_flip() +
labs(x = 'Sampling Technique', y='Runtime (in h)', title = 'Runtime Analysis of Regret Sampling') +
guides(fill=guide_legend(title="Model, Number of Samples Collected")) +
theme(legend.position="none")
library(ggplot2)
library(ggpubr)
library(tidyverse)
theme_set(theme_pubr())
##------Regret------##
runtime_regret <- tibble::tibble(model = c('Random Sampling','Random Sampling', 'Bayesian Optimization'),
n_samples = c(60,100,20),
time = c(9.73948469, 17.0868788, 26.0442599))
runtime_regret %>%
mutate(n_samples = as.character(n_samples)) %>%
unite(model, n_samples,
col='model,n_collected_samples',
sep=', ',
na.rm=F) %>%
ggplot(aes(`model,n_collected_samples`, time, fill=`model,n_collected_samples`)) +
geom_col() +
coord_flip() +
labs(x = 'Sampling Technique', y='Runtime (in h)', title = 'Runtime Analysis of Regret Sampling') +
guides(fill=guide_legend(title="Model, Number of Samples Collected")) +
theme(legend.position="none")
library(tidyverse)
library(tidyverse)
df1 <- data.frame(Employees = c("<50", "50-100", "100-500", "500-1.000", "1.000-5.000",
"5.000-10.000", "10.000-50.000", "50.000-100.000", ">100.000"),
Answers = c(5,1,3,1,3,0,0,0,1))
?ordered
df1$Employees <- factor(df1$Employees, levels = c("<50", "50-100", "100-500",
"500-1.000", "1.000-5.000",
"5.000-10.000", "10.000-50.000",
"50.000-100.000", ">100.000"), ordered = T)
df1 %>% ggplot(aes(Employees, Answers, fill=Employees)) +
geom_col()
library(ggpubr)
theme_set(theme_pubr())
df1 %>%
ggplot(aes(Employees, Answers, fill=Employees)) +
geom_col() +
df1 %>%
ggplot(aes(Employees, Answers, fill=Employees)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90), title = 'Title')
df1 %>%
ggplot(aes(Employees, Answers, fill=Employees)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90), title = 'Title')
df1 %>%
ggplot(aes(Employees, Answers, fill=Employees)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90), title = element_text('Title'))
?t.test
dnorm((4-3)/(4-3.5),1,0)
dnorm((4-3)/(4-3.5),1900,1)
?dnorm
qnorm(1/3.5,1,0)
pnorm(1/3.5,1,0)
1/3.5
qnorm(0.2857143,1900,200)
qnorm(0.2857143,0,1)
dnorm(1787,1900,200)
shiny::runApp('C:/Users/atayc/OneDrive/Desktop/M.Sc. 2. Semester/SAP Praktikum/SAPforecasts')
?auto.arima
?tbats
library(tidyverse)
library(lubridate)
library(forecast)
library(prophet)
library(keras)
# Set the path to your folder containing CSV files
setwd('C:/Users/atayc/OneDrive/Desktop/M.Sc. 3. semester/Computational Tools for Data Science/brazil_ecommerce/datasets')
folder_path <- getwd()
# Get a list of CSV files in the folder
csv_files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
# Check if there are any CSV files in the folder
if (length(csv_files) == 0) {
stop("No CSV files found in the specified folder.")
}
# Read all CSV files and store them in a list with filenames as variable names
list_of_dataframes <- lapply(csv_files, function(file) {
# Extract the file name without extension
file_name <- tools::file_path_sans_ext(basename(file))
# Read the CSV file and assign it to a variable with the file name
assign(file_name, read.csv(file), envir = .GlobalEnv)
})
orders <- olist_orders_dataset %>% inner_join(olist_order_items_dataset, by='order_id')
orders_sellers <- olist_sellers_dataset %>%
inner_join(olist_order_items_dataset, by='seller_id') %>%
inner_join(olist_orders_dataset, by='order_id') %>%
inner_join(olist_products_dataset, by='product_id')
orders_sellers <- orders_sellers %>%
mutate(order_purchase_timestamp = date(order_purchase_timestamp)) %>%
mutate(order_week = floor_date(order_purchase_timestamp, unit = "week"),
order_month = month(order_purchase_timestamp),
order_year = year(order_purchase_timestamp),
order_monthyear = floor_date(order_purchase_timestamp, unit = "month")
)
orders_sellers %>% glimpse
